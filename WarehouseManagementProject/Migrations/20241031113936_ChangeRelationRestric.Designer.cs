// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WarehouseManagementProject.Data;

#nullable disable

namespace WarehouseManagementProject.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241031113936_ChangeRelationRestric")]
    partial class ChangeRelationRestric
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WarehouseManagementProject.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryName = "Electronics"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryName = "Household Items"
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryName = "Office Supplies"
                        },
                        new
                        {
                            CategoryID = 4,
                            CategoryName = "Outdoor Gear"
                        },
                        new
                        {
                            CategoryID = 5,
                            CategoryName = "Sports Equipment"
                        });
                });

            modelBuilder.Entity("WarehouseManagementProject.Models.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerID = 1,
                            Address = "123 Main St, City A",
                            ContactInfo = "alice.johnson@email.com",
                            CustomerName = "Alice Johnson",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            CustomerID = 2,
                            Address = "456 Elm St, City B",
                            ContactInfo = "bob.smith@email.com",
                            CustomerName = "Bob Smith",
                            PhoneNumber = "234-567-8901"
                        },
                        new
                        {
                            CustomerID = 3,
                            Address = "789 Maple Ave, City C",
                            ContactInfo = "carol.white@email.com",
                            CustomerName = "Carol White",
                            PhoneNumber = "345-678-9012"
                        },
                        new
                        {
                            CustomerID = 4,
                            Address = "101 Pine Rd, City D",
                            ContactInfo = "david.brown@email.com",
                            CustomerName = "David Brown",
                            PhoneNumber = "456-789-0123"
                        },
                        new
                        {
                            CustomerID = 5,
                            Address = "202 Oak Blvd, City E",
                            ContactInfo = "eva.green@email.com",
                            CustomerName = "Eva Green",
                            PhoneNumber = "567-890-1234"
                        });
                });

            modelBuilder.Entity("WarehouseManagementProject.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InventoryID"));

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("QuantityAvailable")
                        .HasColumnType("int");

                    b.HasKey("InventoryID");

                    b.HasIndex("ProductID");

                    b.ToTable("Inventories");

                    b.HasData(
                        new
                        {
                            InventoryID = 1,
                            ProductID = 1,
                            QuantityAvailable = 100
                        },
                        new
                        {
                            InventoryID = 2,
                            ProductID = 2,
                            QuantityAvailable = 50
                        },
                        new
                        {
                            InventoryID = 3,
                            ProductID = 3,
                            QuantityAvailable = 75
                        },
                        new
                        {
                            InventoryID = 4,
                            ProductID = 4,
                            QuantityAvailable = 120
                        },
                        new
                        {
                            InventoryID = 5,
                            ProductID = 5,
                            QuantityAvailable = 30
                        },
                        new
                        {
                            InventoryID = 6,
                            ProductID = 6,
                            QuantityAvailable = 60
                        },
                        new
                        {
                            InventoryID = 7,
                            ProductID = 7,
                            QuantityAvailable = 40
                        },
                        new
                        {
                            InventoryID = 8,
                            ProductID = 8,
                            QuantityAvailable = 90
                        },
                        new
                        {
                            InventoryID = 9,
                            ProductID = 9,
                            QuantityAvailable = 55
                        },
                        new
                        {
                            InventoryID = 10,
                            ProductID = 10,
                            QuantityAvailable = 25
                        });
                });

            modelBuilder.Entity("WarehouseManagementProject.Models.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderID = 1,
                            CustomerID = 1,
                            OrderDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            TotalAmount = 2025.73
                        },
                        new
                        {
                            OrderID = 2,
                            CustomerID = 2,
                            OrderDate = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Pending",
                            TotalAmount = 5361.4499999999998
                        },
                        new
                        {
                            OrderID = 3,
                            CustomerID = 3,
                            OrderDate = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Completed",
                            TotalAmount = 525.75
                        },
                        new
                        {
                            OrderID = 4,
                            CustomerID = 4,
                            OrderDate = new DateTime(2023, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Shipped",
                            TotalAmount = 1119.99
                        },
                        new
                        {
                            OrderID = 5,
                            CustomerID = 5,
                            OrderDate = new DateTime(2023, 9, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Cancelled",
                            TotalAmount = 370.44999999999999
                        });
                });

            modelBuilder.Entity("WarehouseManagementProject.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailsID"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailsID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailsID = 1,
                            OrderID = 1,
                            ProductID = 1,
                            Quantity = 2
                        },
                        new
                        {
                            OrderDetailsID = 2,
                            OrderID = 2,
                            ProductID = 2,
                            Quantity = 1
                        },
                        new
                        {
                            OrderDetailsID = 3,
                            OrderID = 2,
                            ProductID = 1,
                            Quantity = 3
                        },
                        new
                        {
                            OrderDetailsID = 4,
                            OrderID = 2,
                            ProductID = 3,
                            Quantity = 1
                        },
                        new
                        {
                            OrderDetailsID = 5,
                            OrderID = 2,
                            ProductID = 2,
                            Quantity = 2
                        },
                        new
                        {
                            OrderDetailsID = 6,
                            OrderID = 3,
                            ProductID = 4,
                            Quantity = 1
                        },
                        new
                        {
                            OrderDetailsID = 7,
                            OrderID = 4,
                            ProductID = 5,
                            Quantity = 4
                        },
                        new
                        {
                            OrderDetailsID = 8,
                            OrderID = 2,
                            ProductID = 6,
                            Quantity = 2
                        },
                        new
                        {
                            OrderDetailsID = 9,
                            OrderID = 5,
                            ProductID = 3,
                            Quantity = 1
                        },
                        new
                        {
                            OrderDetailsID = 10,
                            OrderID = 5,
                            ProductID = 7,
                            Quantity = 5
                        },
                        new
                        {
                            OrderDetailsID = 11,
                            OrderID = 1,
                            ProductID = 8,
                            Quantity = 1
                        },
                        new
                        {
                            OrderDetailsID = 12,
                            OrderID = 2,
                            ProductID = 9,
                            Quantity = 2
                        },
                        new
                        {
                            OrderDetailsID = 13,
                            OrderID = 3,
                            ProductID = 10,
                            Quantity = 13
                        },
                        new
                        {
                            OrderDetailsID = 14,
                            OrderID = 4,
                            ProductID = 1,
                            Quantity = 1
                        },
                        new
                        {
                            OrderDetailsID = 15,
                            OrderID = 2,
                            ProductID = 2,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("WarehouseManagementProject.Models.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            CategoryID = 1,
                            Description = "High-performance laptop",
                            ProductName = "Laptop",
                            UnitPrice = 999.99000000000001
                        },
                        new
                        {
                            ProductID = 2,
                            CategoryID = 2,
                            Description = "Bagless vacuum cleaner",
                            ProductName = "Vacuum Cleaner",
                            UnitPrice = 150.0
                        },
                        new
                        {
                            ProductID = 3,
                            CategoryID = 3,
                            Description = "Ergonomic office chair",
                            ProductName = "Office Chair",
                            UnitPrice = 120.5
                        },
                        new
                        {
                            ProductID = 4,
                            CategoryID = 4,
                            Description = "Two-person tent",
                            ProductName = "Tent",
                            UnitPrice = 200.75
                        },
                        new
                        {
                            ProductID = 5,
                            CategoryID = 5,
                            Description = "Standard size soccer ball",
                            ProductName = "Soccer Ball",
                            UnitPrice = 30.0
                        },
                        new
                        {
                            ProductID = 6,
                            CategoryID = 1,
                            Description = "Latest model smartphone",
                            ProductName = "Smartphone",
                            UnitPrice = 699.99000000000001
                        },
                        new
                        {
                            ProductID = 7,
                            CategoryID = 2,
                            Description = "High-speed blender",
                            ProductName = "Blender",
                            UnitPrice = 49.990000000000002
                        },
                        new
                        {
                            ProductID = 8,
                            CategoryID = 3,
                            Description = "LED desk lamp",
                            ProductName = "Desk Lamp",
                            UnitPrice = 25.75
                        },
                        new
                        {
                            ProductID = 9,
                            CategoryID = 4,
                            Description = "Water-resistant backpack",
                            ProductName = "Backpack",
                            UnitPrice = 45.5
                        },
                        new
                        {
                            ProductID = 10,
                            CategoryID = 5,
                            Description = "Professional basketball",
                            ProductName = "Basketball",
                            UnitPrice = 25.0
                        });
                });

            modelBuilder.Entity("WarehouseManagementProject.Models.Receiving", b =>
                {
                    b.Property<int>("ReceivingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceivingID"));

                    b.Property<DateTime>("ReceivingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseID")
                        .HasColumnType("int");

                    b.HasKey("ReceivingID");

                    b.HasIndex("SupplierID");

                    b.HasIndex("WarehouseID");

                    b.ToTable("Receivings");

                    b.HasData(
                        new
                        {
                            ReceivingID = 1,
                            ReceivingDate = new DateTime(2023, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierID = 1,
                            WarehouseID = 1
                        },
                        new
                        {
                            ReceivingID = 2,
                            ReceivingDate = new DateTime(2023, 9, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierID = 2,
                            WarehouseID = 2
                        },
                        new
                        {
                            ReceivingID = 3,
                            ReceivingDate = new DateTime(2023, 9, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierID = 3,
                            WarehouseID = 1
                        },
                        new
                        {
                            ReceivingID = 4,
                            ReceivingDate = new DateTime(2023, 9, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierID = 4,
                            WarehouseID = 3
                        },
                        new
                        {
                            ReceivingID = 5,
                            ReceivingDate = new DateTime(2023, 9, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SupplierID = 5,
                            WarehouseID = 2
                        });
                });

            modelBuilder.Entity("WarehouseManagementProject.Models.ReceivingDetail", b =>
                {
                    b.Property<int>("ReceivingDetailsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReceivingDetailsID"));

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReceivingID")
                        .HasColumnType("int");

                    b.HasKey("ReceivingDetailsID");

                    b.HasIndex("ProductID");

                    b.HasIndex("ReceivingID");

                    b.ToTable("ReceivingDetails");

                    b.HasData(
                        new
                        {
                            ReceivingDetailsID = 1,
                            ProductID = 1,
                            Quantity = 50,
                            ReceivingID = 1
                        },
                        new
                        {
                            ReceivingDetailsID = 2,
                            ProductID = 2,
                            Quantity = 30,
                            ReceivingID = 1
                        },
                        new
                        {
                            ReceivingDetailsID = 3,
                            ProductID = 3,
                            Quantity = 40,
                            ReceivingID = 2
                        },
                        new
                        {
                            ReceivingDetailsID = 4,
                            ProductID = 4,
                            Quantity = 60,
                            ReceivingID = 2
                        },
                        new
                        {
                            ReceivingDetailsID = 5,
                            ProductID = 5,
                            Quantity = 20,
                            ReceivingID = 3
                        },
                        new
                        {
                            ReceivingDetailsID = 6,
                            ProductID = 6,
                            Quantity = 25,
                            ReceivingID = 3
                        },
                        new
                        {
                            ReceivingDetailsID = 7,
                            ProductID = 7,
                            Quantity = 15,
                            ReceivingID = 4
                        },
                        new
                        {
                            ReceivingDetailsID = 8,
                            ProductID = 8,
                            Quantity = 35,
                            ReceivingID = 4
                        },
                        new
                        {
                            ReceivingDetailsID = 9,
                            ProductID = 9,
                            Quantity = 50,
                            ReceivingID = 5
                        },
                        new
                        {
                            ReceivingDetailsID = 10,
                            ProductID = 10,
                            Quantity = 20,
                            ReceivingID = 5
                        },
                        new
                        {
                            ReceivingDetailsID = 11,
                            ProductID = 3,
                            Quantity = 45,
                            ReceivingID = 1
                        },
                        new
                        {
                            ReceivingDetailsID = 12,
                            ProductID = 4,
                            Quantity = 55,
                            ReceivingID = 2
                        },
                        new
                        {
                            ReceivingDetailsID = 13,
                            ProductID = 5,
                            Quantity = 10,
                            ReceivingID = 3
                        },
                        new
                        {
                            ReceivingDetailsID = 14,
                            ProductID = 6,
                            Quantity = 30,
                            ReceivingID = 4
                        },
                        new
                        {
                            ReceivingDetailsID = 15,
                            ProductID = 7,
                            Quantity = 60,
                            ReceivingID = 5
                        });
                });

            modelBuilder.Entity("WarehouseManagementProject.Models.Supplier", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            SupplierID = 1,
                            Address = "101 Alpha Ave, City A",
                            ContactInfo = "contact@alphasupplies.com",
                            PhoneNumber = "123-456-7890",
                            SupplierName = "Alpha Supplies"
                        },
                        new
                        {
                            SupplierID = 2,
                            Address = "202 Beta Blvd, City B",
                            ContactInfo = "info@betaindustries.com",
                            PhoneNumber = "234-567-8901",
                            SupplierName = "Beta Industries"
                        },
                        new
                        {
                            SupplierID = 3,
                            Address = "303 Gamma St, City C",
                            ContactInfo = "support@gammagoods.com",
                            PhoneNumber = "345-678-9012",
                            SupplierName = "Gamma Goods"
                        },
                        new
                        {
                            SupplierID = 4,
                            Address = "404 Delta Rd, City D",
                            ContactInfo = "sales@deltawholesale.com",
                            PhoneNumber = "456-789-0123",
                            SupplierName = "Delta Wholesale"
                        },
                        new
                        {
                            SupplierID = 5,
                            Address = "505 Epsilon Ln, City E",
                            ContactInfo = "inquiry@epsilon.com",
                            PhoneNumber = "567-890-1234",
                            SupplierName = "Epsilon Enterprises"
                        });
                });

            modelBuilder.Entity("WarehouseManagementProject.Models.Warehouse", b =>
                {
                    b.Property<int>("WarehouseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarehouseID"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("WarehouseID");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            WarehouseID = 1,
                            Location = "Downtown City A",
                            WarehouseName = "Central Warehouse"
                        },
                        new
                        {
                            WarehouseID = 2,
                            Location = "Uptown City B",
                            WarehouseName = "Northside Warehouse"
                        },
                        new
                        {
                            WarehouseID = 3,
                            Location = "East District City C",
                            WarehouseName = "East End Warehouse"
                        },
                        new
                        {
                            WarehouseID = 4,
                            Location = "Westside City D",
                            WarehouseName = "Westside Warehouse"
                        },
                        new
                        {
                            WarehouseID = 5,
                            Location = "Southside City E",
                            WarehouseName = "Southpoint Warehouse"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WarehouseManagementProject.Models.Inventory", b =>
                {
                    b.HasOne("WarehouseManagementProject.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WarehouseManagementProject.Models.Order", b =>
                {
                    b.HasOne("WarehouseManagementProject.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WarehouseManagementProject.Models.OrderDetail", b =>
                {
                    b.HasOne("WarehouseManagementProject.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagementProject.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WarehouseManagementProject.Models.Product", b =>
                {
                    b.HasOne("WarehouseManagementProject.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("WarehouseManagementProject.Models.Receiving", b =>
                {
                    b.HasOne("WarehouseManagementProject.Models.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagementProject.Models.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("WarehouseManagementProject.Models.ReceivingDetail", b =>
                {
                    b.HasOne("WarehouseManagementProject.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WarehouseManagementProject.Models.Receiving", "Receiving")
                        .WithMany()
                        .HasForeignKey("ReceivingID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Receiving");
                });
#pragma warning restore 612, 618
        }
    }
}
